# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import user_management_pb2 as user__management__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in user_management_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserManagementStub(object):
    """User Management service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/usermanagement.UserManagement/CreateUser',
                request_serializer=user__management__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=user__management__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.DeleteGroup = channel.unary_unary(
                '/usermanagement.UserManagement/DeleteGroup',
                request_serializer=user__management__pb2.DeleteGroupRequest.SerializeToString,
                response_deserializer=user__management__pb2.DeleteGroupResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/usermanagement.UserManagement/GetUser',
                request_serializer=user__management__pb2.GetUserRequest.SerializeToString,
                response_deserializer=user__management__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.CreateGroup = channel.unary_unary(
                '/usermanagement.UserManagement/CreateGroup',
                request_serializer=user__management__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=user__management__pb2.CreateGroupResponse.FromString,
                _registered_method=True)
        self.GetGroup = channel.unary_unary(
                '/usermanagement.UserManagement/GetGroup',
                request_serializer=user__management__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=user__management__pb2.GetGroupResponse.FromString,
                _registered_method=True)


class UserManagementServicer(object):
    """User Management service definition
    """

    def CreateUser(self, request, context):
        """Creates a new user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Fetches a user by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Creates a new group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Fetches a group by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=user__management__pb2.CreateUserRequest.FromString,
                    response_serializer=user__management__pb2.CreateUserResponse.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=user__management__pb2.DeleteGroupRequest.FromString,
                    response_serializer=user__management__pb2.DeleteGroupResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=user__management__pb2.GetUserRequest.FromString,
                    response_serializer=user__management__pb2.GetUserResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=user__management__pb2.CreateGroupRequest.FromString,
                    response_serializer=user__management__pb2.CreateGroupResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=user__management__pb2.GetGroupRequest.FromString,
                    response_serializer=user__management__pb2.GetGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'usermanagement.UserManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('usermanagement.UserManagement', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserManagement(object):
    """User Management service definition
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/usermanagement.UserManagement/CreateUser',
            user__management__pb2.CreateUserRequest.SerializeToString,
            user__management__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/usermanagement.UserManagement/DeleteGroup',
            user__management__pb2.DeleteGroupRequest.SerializeToString,
            user__management__pb2.DeleteGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/usermanagement.UserManagement/GetUser',
            user__management__pb2.GetUserRequest.SerializeToString,
            user__management__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/usermanagement.UserManagement/CreateGroup',
            user__management__pb2.CreateGroupRequest.SerializeToString,
            user__management__pb2.CreateGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/usermanagement.UserManagement/GetGroup',
            user__management__pb2.GetGroupRequest.SerializeToString,
            user__management__pb2.GetGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
