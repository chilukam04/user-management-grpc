/**
 * @fileoverview gRPC-Web generated client stub for usermanagement
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: user_management.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.usermanagement = require('./user_management_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.usermanagement.UserManagementClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.usermanagement.UserManagementPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.usermanagement.CreateUserRequest,
 *   !proto.usermanagement.CreateUserResponse>}
 */
const methodDescriptor_UserManagement_CreateUser = new grpc.web.MethodDescriptor(
  '/usermanagement.UserManagement/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.usermanagement.CreateUserRequest,
  proto.usermanagement.CreateUserResponse,
  /**
   * @param {!proto.usermanagement.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.usermanagement.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.usermanagement.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.usermanagement.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.usermanagement.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.usermanagement.UserManagementClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/usermanagement.UserManagement/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserManagement_CreateUser,
      callback);
};


/**
 * @param {!proto.usermanagement.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.usermanagement.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.usermanagement.UserManagementPromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/usermanagement.UserManagement/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserManagement_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.usermanagement.GetUserRequest,
 *   !proto.usermanagement.GetUserResponse>}
 */
const methodDescriptor_UserManagement_GetUser = new grpc.web.MethodDescriptor(
  '/usermanagement.UserManagement/GetUser',
  grpc.web.MethodType.UNARY,
  proto.usermanagement.GetUserRequest,
  proto.usermanagement.GetUserResponse,
  /**
   * @param {!proto.usermanagement.GetUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.usermanagement.GetUserResponse.deserializeBinary
);


/**
 * @param {!proto.usermanagement.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.usermanagement.GetUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.usermanagement.GetUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.usermanagement.UserManagementClient.prototype.getUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/usermanagement.UserManagement/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserManagement_GetUser,
      callback);
};


/**
 * @param {!proto.usermanagement.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.usermanagement.GetUserResponse>}
 *     Promise that resolves to the response
 */
proto.usermanagement.UserManagementPromiseClient.prototype.getUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/usermanagement.UserManagement/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserManagement_GetUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.usermanagement.CreateGroupRequest,
 *   !proto.usermanagement.CreateGroupResponse>}
 */
const methodDescriptor_UserManagement_CreateGroup = new grpc.web.MethodDescriptor(
  '/usermanagement.UserManagement/CreateGroup',
  grpc.web.MethodType.UNARY,
  proto.usermanagement.CreateGroupRequest,
  proto.usermanagement.CreateGroupResponse,
  /**
   * @param {!proto.usermanagement.CreateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.usermanagement.CreateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.usermanagement.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.usermanagement.CreateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.usermanagement.CreateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.usermanagement.UserManagementClient.prototype.createGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/usermanagement.UserManagement/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_UserManagement_CreateGroup,
      callback);
};


/**
 * @param {!proto.usermanagement.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.usermanagement.CreateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.usermanagement.UserManagementPromiseClient.prototype.createGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/usermanagement.UserManagement/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_UserManagement_CreateGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.usermanagement.GetGroupRequest,
 *   !proto.usermanagement.GetGroupResponse>}
 */
const methodDescriptor_UserManagement_GetGroup = new grpc.web.MethodDescriptor(
  '/usermanagement.UserManagement/GetGroup',
  grpc.web.MethodType.UNARY,
  proto.usermanagement.GetGroupRequest,
  proto.usermanagement.GetGroupResponse,
  /**
   * @param {!proto.usermanagement.GetGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.usermanagement.GetGroupResponse.deserializeBinary
);


/**
 * @param {!proto.usermanagement.GetGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.usermanagement.GetGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.usermanagement.GetGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.usermanagement.UserManagementClient.prototype.getGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/usermanagement.UserManagement/GetGroup',
      request,
      metadata || {},
      methodDescriptor_UserManagement_GetGroup,
      callback);
};


/**
 * @param {!proto.usermanagement.GetGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.usermanagement.GetGroupResponse>}
 *     Promise that resolves to the response
 */
proto.usermanagement.UserManagementPromiseClient.prototype.getGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/usermanagement.UserManagement/GetGroup',
      request,
      metadata || {},
      methodDescriptor_UserManagement_GetGroup);
};


module.exports = proto.usermanagement;

